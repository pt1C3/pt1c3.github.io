{"version":3,"file":"static/js/420.837c088a.chunk.js","mappings":"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","sources":["../node_modules/framer-motion/dist/es/value/use-motion-value.mjs","../node_modules/framer-motion/dist/es/value/use-spring.mjs","../node_modules/framer-motion/dist/es/render/dom/viewport/index.mjs","../node_modules/framer-motion/dist/es/utils/use-in-view.mjs","blocks/TextAnimations/CountUp/CountUp.jsx"],"sourcesContent":["import { useContext, useState, useEffect } from 'react';\nimport { motionValue } from './index.mjs';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { useConstant } from '../utils/use-constant.mjs';\n\n/**\n * Creates a `MotionValue` to track the state and velocity of a value.\n *\n * Usually, these are created automatically. For advanced use-cases, like use with `useTransform`, you can create `MotionValue`s externally and pass them into the animated component via the `style` prop.\n *\n * ```jsx\n * export const MyComponent = () => {\n *   const scale = useMotionValue(1)\n *\n *   return <motion.div style={{ scale }} />\n * }\n * ```\n *\n * @param initial - The initial state.\n *\n * @public\n */\nfunction useMotionValue(initial) {\n    const value = useConstant(() => motionValue(initial));\n    /**\n     * If this motion value is being used in static mode, like on\n     * the Framer canvas, force components to rerender when the motion\n     * value is updated.\n     */\n    const { isStatic } = useContext(MotionConfigContext);\n    if (isStatic) {\n        const [, setLatest] = useState(initial);\n        useEffect(() => value.on(\"change\", setLatest), []);\n    }\n    return value;\n}\n\nexport { useMotionValue };\n","import { useContext, useRef, useInsertionEffect } from 'react';\nimport { animateValue } from '../animation/animators/MainThreadAnimation.mjs';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { useIsomorphicLayoutEffect } from '../utils/use-isomorphic-effect.mjs';\nimport { useMotionValue } from './use-motion-value.mjs';\nimport { isMotionValue } from './utils/is-motion-value.mjs';\nimport { frame, frameData } from '../frameloop/frame.mjs';\n\nfunction toNumber(v) {\n    if (typeof v === \"number\")\n        return v;\n    return parseFloat(v);\n}\n/**\n * Creates a `MotionValue` that, when `set`, will use a spring animation to animate to its new state.\n *\n * It can either work as a stand-alone `MotionValue` by initialising it with a value, or as a subscriber\n * to another `MotionValue`.\n *\n * @remarks\n *\n * ```jsx\n * const x = useSpring(0, { stiffness: 300 })\n * const y = useSpring(x, { damping: 10 })\n * ```\n *\n * @param inputValue - `MotionValue` or number. If provided a `MotionValue`, when the input `MotionValue` changes, the created `MotionValue` will spring towards that value.\n * @param springConfig - Configuration options for the spring.\n * @returns `MotionValue`\n *\n * @public\n */\nfunction useSpring(source, config = {}) {\n    const { isStatic } = useContext(MotionConfigContext);\n    const activeSpringAnimation = useRef(null);\n    const value = useMotionValue(isMotionValue(source) ? toNumber(source.get()) : source);\n    const latestValue = useRef(value.get());\n    const latestSetter = useRef(() => { });\n    const startAnimation = () => {\n        /**\n         * If the previous animation hasn't had the chance to even render a frame, render it now.\n         */\n        const animation = activeSpringAnimation.current;\n        if (animation && animation.time === 0) {\n            animation.sample(frameData.delta);\n        }\n        stopAnimation();\n        activeSpringAnimation.current = animateValue({\n            keyframes: [value.get(), latestValue.current],\n            velocity: value.getVelocity(),\n            type: \"spring\",\n            restDelta: 0.001,\n            restSpeed: 0.01,\n            ...config,\n            onUpdate: latestSetter.current,\n        });\n    };\n    const stopAnimation = () => {\n        if (activeSpringAnimation.current) {\n            activeSpringAnimation.current.stop();\n        }\n    };\n    useInsertionEffect(() => {\n        return value.attach((v, set) => {\n            /**\n             * A more hollistic approach to this might be to use isStatic to fix VisualElement animations\n             * at that level, but this will work for now\n             */\n            if (isStatic)\n                return set(v);\n            latestValue.current = v;\n            latestSetter.current = set;\n            frame.update(startAnimation);\n            return value.get();\n        }, stopAnimation);\n    }, [JSON.stringify(config)]);\n    useIsomorphicLayoutEffect(() => {\n        if (isMotionValue(source)) {\n            return source.on(\"change\", (v) => value.set(toNumber(v)));\n        }\n    }, [value]);\n    return value;\n}\n\nexport { useSpring };\n","import { resolveElements } from 'motion-dom';\n\nconst thresholds = {\n    some: 0,\n    all: 1,\n};\nfunction inView(elementOrSelector, onStart, { root, margin: rootMargin, amount = \"some\" } = {}) {\n    const elements = resolveElements(elementOrSelector);\n    const activeIntersections = new WeakMap();\n    const onIntersectionChange = (entries) => {\n        entries.forEach((entry) => {\n            const onEnd = activeIntersections.get(entry.target);\n            /**\n             * If there's no change to the intersection, we don't need to\n             * do anything here.\n             */\n            if (entry.isIntersecting === Boolean(onEnd))\n                return;\n            if (entry.isIntersecting) {\n                const newOnEnd = onStart(entry);\n                if (typeof newOnEnd === \"function\") {\n                    activeIntersections.set(entry.target, newOnEnd);\n                }\n                else {\n                    observer.unobserve(entry.target);\n                }\n            }\n            else if (typeof onEnd === \"function\") {\n                onEnd(entry);\n                activeIntersections.delete(entry.target);\n            }\n        });\n    };\n    const observer = new IntersectionObserver(onIntersectionChange, {\n        root,\n        rootMargin,\n        threshold: typeof amount === \"number\" ? amount : thresholds[amount],\n    });\n    elements.forEach((element) => observer.observe(element));\n    return () => observer.disconnect();\n}\n\nexport { inView };\n","import { useState, useEffect } from 'react';\nimport { inView } from '../render/dom/viewport/index.mjs';\n\nfunction useInView(ref, { root, margin, amount, once = false } = {}) {\n    const [isInView, setInView] = useState(false);\n    useEffect(() => {\n        if (!ref.current || (once && isInView))\n            return;\n        const onEnter = () => {\n            setInView(true);\n            return once ? undefined : () => setInView(false);\n        };\n        const options = {\n            root: (root && root.current) || undefined,\n            margin,\n            amount,\n        };\n        return inView(ref.current, onEnter, options);\n    }, [root, ref, margin, once, amount]);\n    return isInView;\n}\n\nexport { useInView };\n","/*\r\n\tjsrepo 1.34.0\r\n\tInstalled from https://reactbits.dev/default/\r\n\t09-02-2025\r\n*/\r\n\r\nimport { useEffect, useRef } from \"react\";\r\nimport { useInView, useMotionValue, useSpring } from \"framer-motion\";\r\n\r\nexport default function CountUp({\r\n  to,\r\n  from = 0,\r\n  direction = \"up\",\r\n  delay = 0,\r\n  duration = 2, // Duration of the animation in seconds\r\n  className = \"\",\r\n  startWhen = true,\r\n  separator = \"\",\r\n  onStart,\r\n  onEnd,\r\n}) {\r\n  const ref = useRef(null);\r\n  const motionValue = useMotionValue(direction === \"down\" ? to : from);\r\n\r\n  // Calculate damping and stiffness based on duration\r\n  const damping = 20 + 40 * (1 / duration); // Adjust this formula for finer control\r\n  const stiffness = 100 * (1 / duration); // Adjust this formula for finer control\r\n\r\n  const springValue = useSpring(motionValue, {\r\n    damping,\r\n    stiffness,\r\n  });\r\n\r\n  const isInView = useInView(ref, { once: true, margin: \"0px\" });\r\n\r\n  // Set initial text content to the initial value based on direction\r\n  useEffect(() => {\r\n    if (ref.current) {\r\n      ref.current.textContent = String(direction === \"down\" ? to : from);\r\n    }\r\n  }, [from, to, direction]);\r\n\r\n  // Start the animation when in view and startWhen is true\r\n  useEffect(() => {\r\n    if (isInView && startWhen) {\r\n      if (typeof onStart === \"function\") {\r\n        onStart();\r\n      }\r\n\r\n      const timeoutId = setTimeout(() => {\r\n        motionValue.set(direction === \"down\" ? from : to);\r\n      }, delay * 1000);\r\n\r\n      const durationTimeoutId = setTimeout(\r\n        () => {\r\n          if (typeof onEnd === \"function\") {\r\n            onEnd();\r\n          }\r\n        },\r\n        delay * 1000 + duration * 1000,\r\n      );\r\n\r\n      return () => {\r\n        clearTimeout(timeoutId);\r\n        clearTimeout(durationTimeoutId);\r\n      };\r\n    }\r\n  }, [\r\n    isInView,\r\n    startWhen,\r\n    motionValue,\r\n    direction,\r\n    from,\r\n    to,\r\n    delay,\r\n    onStart,\r\n    onEnd,\r\n    duration,\r\n  ]);\r\n\r\n  // Update text content with formatted number on spring value change\r\n  useEffect(() => {\r\n    const unsubscribe = springValue.on(\"change\", (latest) => {\r\n      if (ref.current) {\r\n        const options = {\r\n          useGrouping: !!separator,\r\n          minimumFractionDigits: 0,\r\n          maximumFractionDigits: 0,\r\n        };\r\n\r\n        const formattedNumber = Intl.NumberFormat(\"en-US\", options).format(\r\n          latest.toFixed(0),\r\n        );\r\n\r\n        ref.current.textContent = separator\r\n          ? formattedNumber.replace(/,/g, separator)\r\n          : formattedNumber;\r\n      }\r\n    });\r\n\r\n    return () => unsubscribe();\r\n  }, [springValue, separator]);\r\n\r\n  return <span className={`${className}`} ref={ref} />;\r\n}\r\n"],"names":["useMotionValue","initial","value","useConstant","motionValue","isStatic","useContext","MotionConfigContext","setLatest","useState","useEffect","on","toNumber","v","parseFloat","thresholds","some","all","useInView","ref","root","margin","amount","once","arguments","length","undefined","isInView","setInView","current","options","elementOrSelector","onStart","rootMargin","elements","resolveElements","activeIntersections","WeakMap","observer","IntersectionObserver","entries","forEach","entry","onEnd","get","target","isIntersecting","Boolean","newOnEnd","set","unobserve","delete","threshold","element","observe","disconnect","inView","onEnter","CountUp","_ref","to","from","direction","delay","duration","className","startWhen","separator","useRef","springValue","source","config","activeSpringAnimation","isMotionValue","latestValue","latestSetter","startAnimation","animation","time","sample","frameData","delta","stopAnimation","animateValue","keyframes","velocity","getVelocity","type","restDelta","restSpeed","onUpdate","stop","useInsertionEffect","attach","frame","update","JSON","stringify","useIsomorphicLayoutEffect","useSpring","damping","stiffness","textContent","String","timeoutId","setTimeout","durationTimeoutId","clearTimeout","unsubscribe","latest","useGrouping","minimumFractionDigits","maximumFractionDigits","formattedNumber","Intl","NumberFormat","format","toFixed","replace","_jsx"],"sourceRoot":""}